generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id             String           @id
  email          String           @unique
  name           String?
  onboarded      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  chat_sessions  chat_sessions[]
  user_companies user_companies[]

  @@map("users")
}

model Company {
  id             Int              @id(map: "companies_new_pkey") @default(autoincrement())
  company_name   String           @db.VarChar(255)
  company_id     String?          @unique(map: "companies_new_company_id_key") @db.VarChar(100)
  sector         String?          @db.VarChar(100)
  location       String?          @db.VarChar(100)
  revenue        Float?
  employees      Int?
  created_at     DateTime         @db.Timestamp(6)
  updated_at     DateTime         @db.Timestamp(6)
  user_companies user_companies[]

  @@map("companies")
}

model Agency {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  contact     String?   @db.VarChar(255)
  description String?
  createdAt   DateTime  @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamp(6)
  fundings    Funding[]

  @@map("agencies")
}

model Funding {
  id             Int              @id @default(autoincrement())
  title          String           @db.VarChar(500)
  description    String?
  sector         String?          @db.VarChar(100)
  deadline       DateTime?        @db.Timestamp(6)
  amount         Float?
  eligibility    String?
  requiredDocs   String?          @map("required_docs")
  agencyId       Int?             @map("agency_id")
  createdAt      DateTime         @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime         @updatedAt @map("updated_at") @db.Timestamp(6)
  s3_keys        String[]         @db.VarChar
  funding_chunks funding_chunks[]
  agency         Agency?          @relation(fields: [agencyId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("fundings")
}

model alembic_version {
  version_num String @id(map: "alembic_version_pkc") @db.VarChar(32)
}

model chat_messages {
  id            Int           @id @default(autoincrement())
  session_id    String        @db.VarChar
  role          String        @db.VarChar(20)
  content       String
  tokens        Int?
  created_at    DateTime      @db.Timestamp(6)
  updated_at    DateTime      @db.Timestamp(6)
  chat_sessions chat_sessions @relation(fields: [session_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model chat_sessions {
  id            String          @id
  userId        String
  messages      Json[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  user_id       String?         @db.VarChar
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  chat_messages chat_messages[]
  users         User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model funding_chunks {
  id         Int                    @id @default(autoincrement())
  funding_id Int
  chunk_text String
  embedding  Unsupported("vector")?
  page_no    Int?
  created_at DateTime               @db.Timestamp(6)
  updated_at DateTime               @db.Timestamp(6)
  fundings   Funding                @relation(fields: [funding_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user_companies {
  user_id    String  @db.VarChar
  company_id Int
  role       String? @db.VarChar(50)
  companies  Company @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      User    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, company_id])
}
